// Code generated by protoc-gen-go. DO NOT EDIT.
// source: student.proto

package student

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Student struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{0}
}

func (m *Student) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Student.Unmarshal(m, b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Student.Marshal(b, m, deterministic)
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return xxx_messageInfo_Student.Size(m)
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Student) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Class struct {
	ClassName            string   `protobuf:"bytes,1,opt,name=className,proto3" json:"className,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Class) Reset()         { *m = Class{} }
func (m *Class) String() string { return proto.CompactTextString(m) }
func (*Class) ProtoMessage()    {}
func (*Class) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{1}
}

func (m *Class) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Class.Unmarshal(m, b)
}
func (m *Class) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Class.Marshal(b, m, deterministic)
}
func (m *Class) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Class.Merge(m, src)
}
func (m *Class) XXX_Size() int {
	return xxx_messageInfo_Class.Size(m)
}
func (m *Class) XXX_DiscardUnknown() {
	xxx_messageInfo_Class.DiscardUnknown(m)
}

var xxx_messageInfo_Class proto.InternalMessageInfo

func (m *Class) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func init() {
	proto.RegisterType((*Student)(nil), "student.Student")
	proto.RegisterType((*Class)(nil), "student.Class")
}

func init() { proto.RegisterFile("student.proto", fileDescriptor_94a1c1b032ad0c00) }

var fileDescriptor_94a1c1b032ad0c00 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x29, 0x4d,
	0x49, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xf4, 0xb9,
	0xd8, 0x83, 0x21, 0x4c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x80, 0x8b, 0x39, 0x31, 0x3d, 0x55, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x35, 0x08, 0xc4, 0x54, 0x52, 0xe5, 0x62, 0x75, 0xce, 0x49, 0x2c, 0x2e, 0x16, 0x92, 0xe1,
	0xe2, 0x4c, 0x06, 0x31, 0xfc, 0x10, 0x7a, 0x10, 0x02, 0x46, 0x56, 0x5c, 0x9c, 0x6e, 0x99, 0x79,
	0x29, 0x10, 0xa5, 0xba, 0x5c, 0xec, 0xbe, 0x95, 0x10, 0xa6, 0x80, 0x1e, 0xcc, 0x21, 0x50, 0x6b,
	0xa5, 0xf8, 0xe0, 0x22, 0x60, 0x15, 0x4a, 0x0c, 0x4e, 0xc2, 0x51, 0x82, 0x7a, 0xfa, 0x50, 0x41,
	0x6b, 0x28, 0x9d, 0xc4, 0x06, 0x76, 0xb8, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xa5, 0x3d,
	0xc1, 0xc9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FindClassClient is the client API for FindClass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FindClassClient interface {
	MyClass(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Class, error)
}

type findClassClient struct {
	cc *grpc.ClientConn
}

func NewFindClassClient(cc *grpc.ClientConn) FindClassClient {
	return &findClassClient{cc}
}

func (c *findClassClient) MyClass(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/student.FindClass/MyClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FindClassServer is the server API for FindClass service.
type FindClassServer interface {
	MyClass(context.Context, *Student) (*Class, error)
}

// UnimplementedFindClassServer can be embedded to have forward compatible implementations.
type UnimplementedFindClassServer struct {
}

func (*UnimplementedFindClassServer) MyClass(ctx context.Context, req *Student) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyClass not implemented")
}

func RegisterFindClassServer(s *grpc.Server, srv interface{}) {
	s.RegisterService(&_FindClass_serviceDesc, srv)
}

func _FindClass_MyClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindClassServer).MyClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.FindClass/MyClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindClassServer).MyClass(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

var _FindClass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "student.FindClass",
	HandlerType: (*FindClassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyClass",
			Handler:    _FindClass_MyClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student.proto",
}
